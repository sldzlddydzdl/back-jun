package main;

import java.util.*;

public class 문제3 {

	
	static int[][] dirs = {{1,0},{-1,0},{0,1},{0,-1},
			{1,1},{1,-1},{-1,1},{-1,-1}};
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub

		int n = 3;
		int m = 4;
		int[] x = {2};
		int[] y = {1,2};
		
		Arrays.sort(x);
		Arrays.sort(y);
		
		int[][] map = new int[m+y.length][n+x.length];
		
		for(int i = 0 ; i < map.length; i++) {
			for(int j = 0 ; j < map[i].length; j++) {
				map[i][j] = 1;
			}
		}
		
		// 이어진 숫자 처리
		int[] newX = new int[x.length];
		int[] newY = new int[y.length];
		
		
		// x 처리
		newX[0] = x[0];
		int count = 0;
		
		for(int i = 1 ; i < x.length; i++) {
			if(x[i] == x[i-1]+1) {
				newX[i] = x[i]+1+count;
				count++;
			}
			else {
				newX[i] = x[i]+1+count;
				count++;
			}
		}
		
		for(int i = 0 ; i < newX.length; i++) {
			System.out.println(newX[i]);
		}
		
		System.out.println();
		
		System.out.println("---------------------------");
		
		// y처리
		newY[0] = y[0];
		count = 0;
		
		for(int i = 1 ; i < y.length; i++) {
			if(y[i] == y[i-1]+1) {
				newY[i] = y[i]+1+count;
				count++;
			}
			else {
				newY[i] = y[i]+1+count;
				count++;
			}
		}
		
		for(int i = 0 ; i < newY.length; i++) {
			System.out.println(newY[i]);
		}
		
		// 세로 [x]
		for(int i = 0 ; i < newX.length; i++) {
			for(int j = 0 ; j < map.length; j++) {
				map[j][newX[i]] = 0;
			}
		}
		
		// 가로 [y]
		for(int i = 0 ; i < newY.length; i++) {
			for(int j = 0 ; j < map[0].length; j++) {
				map[newY[i]][j] = 0;
			}
		}
		
		for(int i = 0 ; i < map.length; i++) {
			for(int j = 0 ; j < map[i].length; j++) {
				System.out.print(map[i][j] + " ");
			}
			System.out.println();
		}
		
		System.out.println("----------------------");
//		return maxArea(map);
		System.out.println("최대넓이 : " + maxArea(map));
		
	}
	
	public static int maxArea(int[][] map) {
		if(map == null || map.length == 0) return 0;
		int m = map.length;
		int n = map[0].length;
		int max = 0;
		
		for(int i = 0 ; i < m; i++) {
			for(int j = 0 ; j < n; j++) {
				if(map[i][j] == 1) {
					int area = dfs(map, i , j , 0);
					max = Math.max(max, area);
				}
			}
		}
		
		return max;
	}
	
	public static int dfs(int[][] map , int x, int y , int area) {
		
		int m = map.length;
		int n = map[0].length;
		
		if(x < 0 || x >= m || y < 0 || y >= n || map[x][y] == 0) {
			return area;
		}
		
		map[x][y] = 0;
		area++;
		for(int[] dir : dirs) {
			area = dfs(map, x + dir[0] , y + dir[1] , area);
		}
		return area;
	}

}
